
<div class="layout-slot" style="@FlexRowStyle">
    <div @attributes="AdditionalAttributes" class="@classes(this)">
        <CascadingValue Value="context" IsFixed="true">
            @ChildContent
        </CascadingValue>
    </div>
</div>

@code {
    private static readonly CssMap<Container> classes = Css.Map<Container>()
        .Add("layout-container")
        .Add(static c => c.Align.ToCssClass())
        .Add(static c => c.Justify.ToCssClass())
        .Add(static c => c.AdditionalClasses)
        .Build();

    private ContainerContext? context;

    private string? FlexRowStyle => Columns.HasValue
        ? $"--b-cols-columns: {Columns.Value};"
        : null;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int? Columns { get; set; }

    [Parameter]
    public bool Resize { get; set; } = true;

    [Parameter]
    public ItemAlign Align { get; set; }

    [Parameter]
    public ContentJustify Justify { get; set; }

    [Parameter]
    public string? AdditionalClasses { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    protected override void OnParametersSet()
    {
        if (context is null)
            context = new ContainerContext();
        if (Columns.HasValue)
            context.Columns = Columns.Value;
        context.Resize = Resize;
    }
}