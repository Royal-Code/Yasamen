<div class="progress" 
     role="progressbar" aria-valuenow="@CurrentValue" aria-valuemin="@MinValue" aria-valuemax="@MaxValue" 
     style="@ProgressStyle">
    <div class="@classes(this)" style="@BarStyle" @attributes="AdditionalAttributes">
        @ShowPercent
    </div>
    
</div>

@code {

    private static readonly CssMap<ProgressBar> classes = Css.Map<ProgressBar>()
        .Add("progress-bar")
        .Add(static p => p.Animated, "animated")
        .Add(static p => p.Striped, "progress-bar-striped")
        .Add(static p => p.Style.ToCssClass())
        .Add(static p => p.AdditionalClasses)
        .Build();

    private string ProgressStyle => $"{(Height > 0 ? $"height: {Height}px;" : "")}{(Stacked ? $"width: {Percent}" : "")}";
    private string BarStyle => Stacked ? "" : $"width: {Percent}";

    private string Percent => $"{string.Format("{0:#}", PercentCalc)}%";

    private string? ShowPercent => ShowValue ? Percent : null;

    private double PercentCalc
    {
        get
        {
            var value = ((CurrentValue - MinValue) * (MaxValue - MinValue)) / DivValue;
            return value;
        }
    }

    private double DivValue => StackedContext is null 
        ? MaxValue 
        : StackedContext.StackedMaxValue == 0
            ? MaxValue
            : MaxValue * (1 + (MaxValue / (double)StackedContext.StackedMaxValue));
    
    [CascadingParameter]
    public StackedContext? StackedContext { get; set; }

    [Parameter]
    public bool Animated { get; set; } = true;

    [Parameter]
    public bool Striped { get; set; } = true;

    [Parameter]
    public bool ShowValue { get; set; }

    [Parameter]
    public ProgressBarStyles Style { get; set; }

    [Parameter]
    public int CurrentValue { get; set; }

    [Parameter]
    public int MinValue { get; set; } = 0;

    [Parameter]
    public int MaxValue { get; set; } = 100;

    [Parameter]
    public int Height { get; set; }

    [Parameter]
    public string? AdditionalClasses { get; set; }
    
    [Parameter]
    public bool Stacked { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
}
