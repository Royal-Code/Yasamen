@inject NavigationManager Navigator

<button @attributes="AdditionalAttributes"
        type="@Type.ToHtmlAttr()"
        class="@classes(this)"
        disabled="@Disabled"
        @onclick="Clicked"
        @ref="ButtonReference">
        
    <Icon Kind="Kind" @ref="IconReference" />
    
</button>

@code {

    private static CssMap<IconButton> classes = Css.Map<IconButton>()
        .Add("btn-icon")
        .Add(static c => c.Style.ToCssClass(c.Outline))
        .Add(static c => c.Size.ToButtonCssClass())
        .Add(static c => c.Active, "active")
        .Add(static c => c.AdditionalClasses)
        .Build();

    public ElementReference ButtonReference { get; private set; } = default!;

    public Icon IconReference { get; private set; } = default!;

    [Parameter, EditorRequired]
    public Enum Kind { get; set; } = default!;
    
    [Parameter]
    public ButtonType Type { get; set; }
    
    [Parameter]
    public ButtonStyles Style { get; set; }

    [Parameter]
    public Sizes Size { get; set; }

    [Parameter]
    public bool Outline { get; set; }

    [Parameter]
    public bool Active { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? AdditionalClasses { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public string? NavigateTo { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    public async Task Clicked(MouseEventArgs args)
    {
        if (OnClick.HasDelegate)
            await OnClick.InvokeAsync(args);

        if (!string.IsNullOrEmpty(NavigateTo))
            Navigator.NavigateTo(NavigateTo);
    }
}
