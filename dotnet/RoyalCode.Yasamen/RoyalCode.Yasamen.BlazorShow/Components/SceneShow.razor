@using System.Diagnostics.CodeAnalysis;
@using RoyalCode.Yasamen.BlazorShow.Components.Contexts

<CascadingValue Value="context">
    <div class="scene-show">
        <div class="scene-content">
            <h3>@Scene.Show.Name - @Scene.Name</h3>
            <div class="scene-component @AlignClass">
                @if (Scene.RenderKind == ShowRenderKind.Direct)
                {
                    <SceneRender/>
                }
                else
                {
                    <SceneFrame/>
                }
            </div>
        </div>
        <div class="scene-properties">

            <h5>Properties</h5>

            @foreach (var property in Scene.SceneProperties.Where(p => !p.IsHidden && !p.IsFragment && !p.IsEvent))
            {
                <SceneProperty Property="property" Context="context" @key=@property.Name/>
            }

            <SceneFragmentProperties Properties="Scene.SceneProperties.Where(p => p.IsFragment)" Context="context"/>

            <SceneEventsProperties Properties="Scene.SceneProperties.Where(p => p.IsEvent)" Context="context"/>

        </div>
    </div>
</CascadingValue>

@code {
    private SceneContext? context;

    private string AlignClass => (Scene?.Align ?? TextAlign.Middle).ToCssClass();

    [Parameter, EditorRequired]
    public IScene Scene { get; set; }

    [MemberNotNull(nameof(context), nameof(Scene))]
    protected override void OnParametersSet()
    {
        context = new SceneContext(Scene);
        Tracer.Write("SceneShow", "OnParametersSet", $"Scene: {Scene.Show.Name} - {Scene.Name}");
    }
}
