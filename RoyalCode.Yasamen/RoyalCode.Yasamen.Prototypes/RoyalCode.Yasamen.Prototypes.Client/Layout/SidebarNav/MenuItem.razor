@using RoyalCode.Yasamen.Prototypes.Client.Layout.SidebarNav.Icons

<li class="menu-item">
    <div class="menu-item-title" @onclick="ToggleSubMenu">
        <span class="@IconClasses">
            @if (HasSubMenu)
            {
                <DownArrowIcon />
            }
        </span>
        <MenuItemIcon Type="@ItemType" />
        <span class="menu-item-text" @onclick="ClickHandler">@Title</span>
    </div>
    @if (HasSubMenu)
    {
        <div class="submenu-content">
            <ul class="@SubMenuClasses">
                @ChildContent
            </ul>
        </div>
    }
</li>

@code {

    private string IconClasses => IsOpen ? "submenu-arrow open" : "submenu-arrow closed";
    private string SubMenuClasses => IsOpen ? "submenu open" : "submenu closed";

    [Parameter]
    public string Title { get; set; } // Título do item de menu

    [Parameter]
    public MenuItemType ItemType { get; set; } // Tipo do item de menu

    [Parameter]
    public RenderFragment ChildContent { get; set; } // Submenu (ChildContent)

    [Parameter]
    public string? Link { get; set; } // Link para redirecionamento

    [Inject]
    private NavigationManager? Navigation { get; set; }

    private bool IsOpen { get; set; }  // Estado do submenu (aberto ou fechado)

    private bool HasSubMenu => ChildContent != null; // Verifica se o item de menu possui submenu

    private void ToggleSubMenu()
    {
        IsOpen = !IsOpen;
    }

    private void ClickHandler(MouseEventArgs args)
    {
        if (string.IsNullOrEmpty(Link))
        {
            return;
        }

        Navigation?.NavigateTo(Link);
    }
}