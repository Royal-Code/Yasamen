@using RoyalCode.Yasamen.Commons.Interops;
@using RoyalCode.Yasamen.Commons.Modules;
@using RoyalCode.Yasamen.Commons;

@implements IAsyncDisposable

@inject ClickJsModule ClickJsModule;

<div class="@classes(this)" aria-expanded="@AriaExpanded" @attributes="AdditionalAttributes">
    <div @ref="DropReference">
        @Action
    </div>
    @if (ContentType == DropContentType.List)
    {
        <ul class="drop-content">
            @DropContent
        </ul>
    }
    else
    {
        <div class="drop-content">
            @DropContent
        </div>
    }
</div>

@code {
    private static CssMap<DropBase> classes = Css.Map<DropBase>()
        .Add("drop")
        .Add(static c => c.IsOpen, "show")
        .Add(static c => c.Direction == DropDirection.Down, "down")
        .Add(static c => c.Direction == DropDirection.Up, "up")
        .Add(static c => c.Direction == DropDirection.Left, "left")
        .Add(static c => c.Direction == DropDirection.Right, "right")
        .Add(static c => c.Align == DropAlign.Start, "align-start")
        .Add(static c => c.Align == DropAlign.Center, "align-center")
        .Add(static c => c.Align == DropAlign.End, "align-end")
        .Add(static c => c.MinWidth.ToAbbrCssClass())
        .Add(static c => c.AdditionalClasses)
        .Build();

    private readonly Func<bool, ValueTask> onBodyClickHandler;
    private JsBodyClickListener? listener;
    private ElementReference? listenerRef;
    private bool clickedInside;
    private DropHandler? handler;

    public DropBase()
    {
        onBodyClickHandler = OnBodyClickHandler;
    }

    public string AriaExpanded => IsOpen.ToString().ToLowerInvariant();

    public ElementReference DropReference { get; private set; }

    public bool IsOpen { get; private set; }

    [Parameter]
    public RenderFragment Action { get; set; } = default!;

    [Parameter]
    public RenderFragment DropContent { get; set; } = default!;

    [Parameter]
    public DropHandler? Handler { get; set; }

    [Parameter]
    public DropDirection Direction { get; set; }

    [Parameter]
    public DropAlign Align { get; set; }

    [Parameter]
    public Sizes MinWidth { get; set; }

    [Parameter]
    public DropContentType ContentType { get; set; }

    [Parameter]
    public string? AdditionalClasses { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    public void Open()
    {
        if (clickedInside)
        {
            clickedInside = false;
            return;
        }

        Tracer.Write<DropBase>("Open", "Opening the drop");
        IsOpen = true;
        StateHasChanged();
    }

    public void Close()
    {
        Tracer.Write<DropBase>("Close", "Closing the drop");
        IsOpen = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        listener = await ClickJsModule.CreateListenerAsync(onBodyClickHandler);
    }

    protected override void OnParametersSet()
    {
        if (Handler != handler)
        {
            handler?.Unlisten();
            handler = Handler;
            handler?.Listen(this);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (listener is null)
            return;

        if (IsOpen)
        {
            if (listenerRef is null || listenerRef.Value.Id != DropReference.Id)
            {
                Tracer.Write<DropBase>("OnAfterRenderAsync", "Listening the body click");
                await listener.ListenAsync(DropReference);
                listenerRef = DropReference;
            }
        }
        else if (listenerRef is not null)
        {
            Tracer.Write<DropBase>("OnAfterRenderAsync", "Unlistening the body click");
            await listener.UnlistenAsync();
            listenerRef = null;
        }
    }

    private ValueTask OnBodyClickHandler(bool isInside)
    {
        if (isInside)
        {
            clickedInside = true;
            Tracer.Write<DropBase>("OnBodyClickHandler", "Clicked Inside");
        }

        Tracer.Write<DropBase>("OnBodyClickHandler", "Close drop because body click");
        Close();


        return ValueTask.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (listener is not null)
            await listener.DisposeAsync();
        listener = null;
    }
}
