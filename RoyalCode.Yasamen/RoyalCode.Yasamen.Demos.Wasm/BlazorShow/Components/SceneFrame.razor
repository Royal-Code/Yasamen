@using Microsoft.AspNetCore.WebUtilities;
@using RoyalCode.Yasamen.Demos.Wasm.BlazorShow.Components.Contexts;
@using System.Text;

@implements IDisposable;

@inject NavigationManager NavigationManager;

<iframe src="@Url" style="@Styles"></iframe>

@code {

    private readonly Action changeListenerDelegate;

    private string Url;
    private SceneContext? previousContext;

    private string Styles => $"height: {Context.Scene.FrameOptions.Height}; width: {Context.Scene.FrameOptions.Width}; border: none; overflow: scroll;";

    public SceneFrame()
    {
        changeListenerDelegate = ChangeListener;
    }

    [CascadingParameter]
    public SceneContext Context { get; set; }

    protected override void OnParametersSet()
    {
        previousContext?.RemovePropertyChangedListener(changeListenerDelegate);
        Context.AddPropertyChangedListener(changeListenerDelegate);
        previousContext = Context;

        MakeUrl();
    }

    private void MakeUrl()
    {
        var route = Context.Scene.Show.GetDefaultRoute();
        var scene = Context.Scene.Name;
        var base64ContextSerialized = Base64UrlTextEncoder.Encode(Encoding.UTF8.GetBytes(Context.Serialize()));
        Url = $"/render/{route}/{scene}/{base64ContextSerialized}";
    }

    private void ChangeListener()
    {
        MakeUrl();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Context.RemovePropertyChangedListener(changeListenerDelegate);
    }
}
