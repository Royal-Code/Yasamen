@using RoyalCode.Yasamen.Demos.Wasm.BlazorShow.Components.Contexts;

<div class="dropdown">
    <div class="dropdown-toggle" @onclick="HandleToggle">
        <span class="dropdown-value">
            @Value
        </span>
    </div>
    <div class="dropdown-menu @show">
        <div class="dropdown-input-filter">
            <input type="text" placeholder="Type to filter..." @bind=filter />
        </div>
        <div class="dropdown-virtual-scroll">
            <ul class="dropdown-list">
                @foreach (var item in GetItems())
                {
                    var selected = item.Equals(propertyValue.Value);
                    <li class="dropdown-item @(selected ? "selected" : "")" @onclick="() => HandleSelect(item)">
                        @item
                    </li>
                }
            </ul>
        </div>
    </div>
</div>


@typeparam TEnum
@code {

    private ScenePropertyValue propertyValue;
    private IEnumerable<TEnum> items;
    private string? show = null;
    private string? filter = null;

    private string Value => propertyValue?.ValueString ?? string.Empty;

    [Parameter, EditorRequired]
    public SceneContext Context { get; set; }

    [Parameter, EditorRequired]
    public IShowPropertyDescription Property { get; set; }

    protected override void OnParametersSet()
    {
        propertyValue = Context.GetProperty(Property.Property.Name);
        items = Enum.GetValues(typeof(TEnum)).Cast<TEnum>();
    }

    private void HandleToggle(MouseEventArgs args)
    {
        if (show is null)
            show = "show";
        else
            show = null;
    }

    private void HandleSelect(TEnum item)
    {
        propertyValue.Value = item;
        propertyValue.StateHasChanged();
        show = null;
    }

    private IEnumerable<TEnum> GetItems()
    {
        if (string.IsNullOrWhiteSpace(filter))
            return items;
            
        return items.Where(item => item.ToString().Contains(filter, StringComparison.OrdinalIgnoreCase));
    }
}

