@using RoyalCode.Yasamen.Commons;

@implements IDisposable

@if (messageListener is not null 
    && messageListener.Messages.Any())
{
    <div class="@Classes" @attributes="@AdditionalAttributes">
        @foreach (var msg in messageListener.Messages)
        {
            <span>@msg</span>
        }
    </div>
}

@code {
    private readonly Action stateHasChangedDelegate;

    private IModelContext modelContext = null!;
    private IMessageListener? messageListener;

    private CssClassMap Classes =>
        CssClassMap.Create("field-messages")
            .Add(() => messageListener?.HideMessages ?? false, "hidden");
    
    public FieldMessages()
    {
        stateHasChangedDelegate = StateHasChanged;
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    [CascadingParameter]
    IModelContext CascadeModelContext { get; set; } = default!;

    [Parameter, EditorRequired]
    public FieldIdentifier? FieldIdentifier { get; set; }

    [Parameter]
    public string? FieldName { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);

        if (CascadeModelContext is null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading parameter " +
                $"of type {nameof(IModelContext)}. For example, you can use {GetType()} inside " +
                $"an {nameof(ModelEditor<object>)}.");

        if (!FieldIdentifier.HasValue)
        {
            throw new InvalidOperationException(
                $"{GetType()} requires a value for the " +
                $"'{nameof(FieldIdentifier)}' parameter.");
        }

        if (!ReferenceEquals(modelContext, CascadeModelContext))
        {
            Detach();
            modelContext = CascadeModelContext;
            messageListener = modelContext.EditorMessages.CreateListener(FieldIdentifier.Value, FieldName);
            messageListener.ListenChanges(stateHasChangedDelegate);
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }

    private void Detach()
    {
        messageListener?.Dispose();
        messageListener = null;
    }

    void IDisposable.Dispose()
    {
        Detach();
        Dispose(disposing: true);
    }

    protected virtual void Dispose(bool disposing) { }
}
