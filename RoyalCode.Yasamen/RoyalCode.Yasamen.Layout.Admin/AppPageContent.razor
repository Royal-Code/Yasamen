
<div class="@panelClasses(this)" @attributes="@Attributes">
    <header class="@headerClasses(this)">
        <div class="d-flex justify-content-start">
            @HeaderStartContent
            <h2>
                @Title
            </h2>
        </div>
        <div class="d-flex justify-content-end">
            @HeaderEndContent
        </div>
    </header>
    <div class="@mainClasses(this)">
        @MainContent    
    </div>
</div>

@code {
    private static readonly CssMap<AppPageContent> panelClasses = Css.Map<AppPageContent>()
        .Add("app-page-content")
        .Add(static a => a.PanelBorder.CssClasses)
        .Add(static a => a.PanelAdditionalClasses)
        .Build();

    private static readonly CssMap<AppPageContent> mainClasses = Css.Map<AppPageContent>()
        .Add("app-page-content-main m-2")
        .Add(static a => a.MainAdditionalClasses)
        .Build();

    private static readonly CssMap<AppPageContent> headerClasses = Css.Map<AppPageContent>()
        .Add("app-page-content-header d-flex justify-content-between px-2 m-2")
        .Add(static a => a.HeaderBorder.CssClasses)
        .Add(static a => a.HeaderAdditionalClasses)
        .Build();

    [Parameter]
    public Borders PanelBorder { get; set; } = AppDefaults.PageContentPanelBorder;

    [Parameter]
    public Borders HeaderBorder { get; set; } = AppDefaults.PageContentHeaderBorder;

    [Parameter]
    public string? PanelAdditionalClasses { get; set; }
    
    [Parameter]
    public string? MainAdditionalClasses { get; set; }
    
    [Parameter]
    public string? HeaderAdditionalClasses { get; set; }
    
    [Parameter, EditorRequired]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment? HeaderStartContent { get; set; }
    
    [Parameter]
    public RenderFragment? HeaderEndContent { get; set; }

    [Parameter]
    public RenderFragment? MainContent { get; set; }
        
    [Parameter]
    public RenderFragment? ChildContent { set => MainContent = value; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }
}
