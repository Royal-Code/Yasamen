@using RoyalCode.Yasamen.Commons.Interops
@using RoyalCode.Yasamen.Commons.Modules
@using System.Reflection
@using System.Diagnostics

@inject ToggleJsModule ToggleJs
@implements IDisposable

<CascadingValue Value="context" IsFixed="true">
    <div class="@InteractedCssClass @AdditionalClasses layout" @attributes="Attributes" @ref="layoutRef">
        <header class="app-top-content">
            <AppNavBar Shadow="NavBarShadow">
                <Start>
                    @TopStart
                </Start>
                <Middle>
                    @TopCenter
                </Middle>
                <End>
                    @TopEnd
                </End>
            </AppNavBar>
        </header>
        <div class="app-page-content">
            <div class="app-menu-content">
                @Menu
            </div>
            <div class="app-center-content">
                <main class="app-main-content">
                    @Main
                </main>
                <footer class="app-footer-content">
                    @Footer
                </footer>
            </div>
            <div class="app-menu-backdrop" @onclick="MenuBackdropClickHandle"></div>
        </div>
        <div class="app-aside-content">
            
        </div>
    </div>
</CascadingValue>

@code {

    private static LayoutContext context = new ();

    private ElementReference layoutRef;
    private IDisposable? listener;

    private string InteractedCssClass => context.GetInteractedCssClass();

    [Parameter]
    public RenderFragment Main { get; set; }

    [Parameter]
    public RenderFragment Footer { get; set; }

    [Parameter]
    public RenderFragment TopStart { get; set; }
    
    [Parameter]
    public RenderFragment TopCenter { get; set; }
    
    [Parameter]
    public RenderFragment TopEnd { get; set; }
    
    [Parameter]
    public RenderFragment Menu { get; set; }

    [Parameter]
    public bool NavBarShadow { get; set; } = true;
    
    [Parameter]
    public string? AdditionalClasses { get; set; }
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Tracer.Write<AppLayout>("OnAfterRenderAsync", $"Begin, {firstRender}");
        
        if (firstRender)
            listener = context.AddMenuInteracted(async interacted =>
            {
                await ToggleJs.CssClassToggle(layoutRef,
                    LayoutContextCssClassesExtensions.IsInteractedClass,
                    LayoutContextCssClassesExtensions.IsNotInteractedClass,
                    interacted);
            });
        
        await base.OnAfterRenderAsync(firstRender);
        
        Tracer.Write<AppLayout>("OnAfterRenderAsync", "End");
    }

    private void MenuBackdropClickHandle()
    {
        context.MenuInteract();
    }
    
    public void Dispose()
    {
        Tracer.Write<AppLayout>("OnAfterRenderAsync", "Begin");
        
        listener?.Dispose();
        
        Tracer.Write<AppLayout>("OnAfterRenderAsync", "End");
    }
}