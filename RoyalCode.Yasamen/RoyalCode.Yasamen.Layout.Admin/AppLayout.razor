@using RoyalCode.Yasamen.Commons.Interops
@using RoyalCode.Yasamen.Commons.Modules
@using System.Reflection
@using System.Diagnostics

@inject ToggleJsModule ToggleJs
@inject EventsJsModule EventsJs;
@implements IAsyncDisposable

<CascadingValue Value="context" IsFixed="true">
    <div class="@InteractedCssClass @AdditionalClasses layout" @attributes="Attributes" @ref="LayoutReference">
        <header class="app-top-content @TransitionClass" @ref="HeaderReference">
            <AppNavBar Shadow="NavBarShadow">
                <Start>
                    @TopStart
                </Start>
                <Middle>
                    @TopCenter
                </Middle>
                <End>
                    @TopEnd
                </End>
            </AppNavBar>
        </header>
        <div class="app-page-content">
            <div class="app-menu-content" @ref="MenuReference">
                @Menu
            </div>
            <div class="app-center-content">
                <main class="app-main-content">
                    @Main
                </main>
                <footer class="app-footer-content">
                    @Footer
                </footer>
            </div>
            <div class="app-menu-backdrop" @onclick="MenuBackdropClickHandle"></div>
        </div>
        <div class="app-aside-content">
        </div>
    </div>
</CascadingValue>

@code {

    private static LayoutContext context = new();
    private readonly Func<object?, ValueTask> menuTransitionEnd;
    private bool transitioningInteraction;
    private IDisposable? interactedListener;
    private JsEventInterop<object>? transitionEndInterop;


    public AppLayout()
    {
        menuTransitionEnd = MenuTransitionEnd;
    }

    private string InteractedCssClass => context.GetInteractedCssClass();
    private string TransitionClass => transitioningInteraction 
        ? LayoutContextCssClassesExtensions.IsTransitioningClass 
        : "";

    public ElementReference LayoutReference { get; private set; }

    public ElementReference MenuReference { get; private set; }

    public ElementReference HeaderReference { get; private set; }

    [Parameter]
    public RenderFragment Main { get; set; }

    [Parameter]
    public RenderFragment Footer { get; set; }

    [Parameter]
    public RenderFragment TopStart { get; set; }

    [Parameter]
    public RenderFragment TopCenter { get; set; }

    [Parameter]
    public RenderFragment TopEnd { get; set; }

    [Parameter]
    public RenderFragment Menu { get; set; }

    [Parameter]
    public bool NavBarShadow { get; set; } = AppDefaults.NavBarShadow;

    [Parameter]
    public string? AdditionalClasses { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Tracer.Write<AppLayout>("OnAfterRenderAsync", "Begin, first render: {0}", firstRender);

        if (firstRender)
        {
            interactedListener = context.AddMenuInteracted(async interacted =>
            {
                await ToggleJs.CssClassToggle(LayoutReference,
                    LayoutContextCssClassesExtensions.IsInteractedClass,
                    LayoutContextCssClassesExtensions.IsNotInteractedClass,
                    interacted);
                await MenuTransitionStart(null);
            });

            await TryInitTransitionsInterop();
        }
        await base.OnAfterRenderAsync(firstRender);

        Tracer.Write<AppLayout>("OnAfterRenderAsync", "End");
    }

    protected override async Task OnParametersSetAsync()
    {
        await TryInitTransitionsInterop();
    }

    private void MenuBackdropClickHandle()
    {
        context.MenuInteract();
    }

    private async ValueTask TryInitTransitionsInterop()
    {
        if (transitionEndInterop?.ElementHasChanged(MenuReference) ?? false)
            await transitionEndInterop.UpdateElement(MenuReference);

        if (transitionEndInterop is null && MenuReference.Id is not null)
            transitionEndInterop = await EventsJs.On(MenuReference, "transitionend", menuTransitionEnd);
    }

    private async ValueTask MenuTransitionStart(object? value)
    {
        transitioningInteraction = true;
        await ToggleTransitioning();
    }

    private async ValueTask MenuTransitionEnd(object? value)
    {
        transitioningInteraction = false;
        await ToggleTransitioning();
    }

    private async ValueTask ToggleTransitioning()
    {
        await ToggleJs.CssClassToggle(HeaderReference,
            LayoutContextCssClassesExtensions.IsTransitioningClass,
            transitioningInteraction);
    }

    public async ValueTask DisposeAsync()
    {
        interactedListener?.Dispose();
        if (transitionEndInterop is not null)
            await transitionEndInterop.DisposeAsync();
    }
}