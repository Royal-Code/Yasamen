@using RoyalCode.Yasamen.Commons.Interops
@using RoyalCode.Yasamen.Commons.Modules

@inject ScrollJsModule ScrollJs
@inject ToggleJsModule ToggleJs
@implements IAsyncDisposable

<nav b-app-nav-bar class="@HeaderClass" @ref="navRef">
    @if (UseStart)
    {
        <div class="start">
            @Start
        </div>
    }
    @if (UseMiddle)
    {
        <div class="middle">
            @Middle
        </div>
    }
    @if (UseEnd)
    {
        <div class="end">
            @End
        </div>
    }
</nav>


@code {
    private bool scrolled;
    private ScrollInterop? listener;
    private ElementReference navRef;

    private CssClassMap HeaderClass => CssClassMap
        .Create("main-as-primary")
        .Add(() => Shadow, "b-shadow")
        .Add(() => scrolled, "b-scrolled")
        .Add(AdditionalClasses);

    [Parameter]
    public RenderFragment Start { get; set; }

    [Parameter]
    public RenderFragment Middle { get; set; }

    [Parameter]
    public RenderFragment End { get; set; }

    [Parameter]
    public bool UseStart { get; set; } = true;

    [Parameter]
    public bool UseMiddle { get; set; }

    [Parameter]
    public bool UseEnd { get; set; } = true;

    [Parameter]
    public bool Shadow { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }

    [Parameter]
    public string AdditionalClasses { get; set; }

    [CascadingParameter]
    public LayoutContext LayoutContext { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            listener = await ScrollJs.Register(ScrolledHandler);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async ValueTask ScrolledHandler(bool scrolled)
    {
        if (this.scrolled == scrolled)
            return;
                
        this.scrolled = scrolled;
        await ToggleJs.CssClassToggle(navRef, "b-scrolled", scrolled);
    }

    public async ValueTask DisposeAsync()
    {
        if (listener is null)
            return;
        await listener.DisposeAsync();
    }

}